---
title: "Control Flow"
output: html_notebook
---

# Control Flow

## If Statemants


```{r}
if (condition) {
  # code that runs if the condition is met
}

# there can be a space between the if ()
# next thing should be placed on the next line
```

## Conitional Operator

`==` is equal to
`!=` not equal to
`<` less than
`>=` greater than OR equal to
`%in%` is in the set

```{r}
if (5 > 3) {
  print("yes")
}
```


```{r}
if (condition) {
  # do something
  
  #calculate something
  
  #
}

#will always be executed as it's outside the if
```


```{r}
x <- 7
y <- 8

if (x<= y) {
  print("it's less than or equal to y")
}
```
# Task
Write an if statement that prints 'Yes that divides by 2' if a number x is divisible by 2 (hint: use %% 2 == 0 as your expression), try it out for different values of x.

```{r}
x <- 4

if (x %% 2 == 0) {
  print("Yes the divides by 2")
}
```

## Nested Ifs

We can write more complicated if statments

```{r}
if (10 != 5){
  if (2 > 0) {
    print("the second condition is met")
  }
  print("the first condition is met")
}
```
```{r}
if (10 != 5){
  if (2 == 0) {
    print("the second condition is met")
  }
  print("the first condition is met")
}
```

Task 
1. `x` is 10 and `y` is 3
2. `x` is 10 and `y` is 2
3. `x` is 2 and `y` is 10

```{r}
x <- 2
y <- 10

if (x > y) {
  print("Start of outer if block")

  if (x %% y == 0) {
    print("Inner if block 1")
  }

  if (y %in% c(1:5)) {
    print("Inner if block 2")
  }

  print("End of outer if block")
}

print("After if statement")
```


## If... Else

```{r}
if (condition) {
  # do something
} else {
  # do something else
}
```

```{r}
if (rain) {
  waer_wellies()
} else {
  wear_trainers()
}
# if it's raining wear wellies, otherwise wear trainers
```

```{r}
if (4 < 5) {
  print("yes, it's less")
} else {
  print("no, it's not")
}
```

```{r}
if (2 %in% 50:100) {
  print("it's in the set")
} else {
  print("it's not in the set")
}
```
Task - 5 minutes
Edit your code from the first exercise so that it prints ‘Yes that divides’ when x is divisible by 2, and prints ‘No that does not divide’ otherwise.

```{r}
x 

if (x %% 2 == 0) {
  print("yes that divides")
} else {
  print("no that doesn't divde")
}
```

# Task
Here's an example of a nested if-else statement. Predict what it's going to print out for the following conditions:.

When x is 5 and y is 10
When x is 6 and y is 12
When x is 6 and y is 13


```{r}
if_else_function <- function(x, y){
  if (x %in% c(3, 4, 5)){
    
    print("x is in our list")
    
    if (x == 5){
      
      print("x is exactly 5")
      
    }
    
  } else {
    
    print("Start of else statement")
    
    if (y %% x == 0){
      
      print("x divides y")
    
    } else{
      
      print("x does not divide y")
    }
    
    print ("End of else statement")
    
  }
}

if_else_function(5, 10)
```


# Loops

## For Loops


allow you to perform an action repeatedly ie washing basket

R for loop syntax

```{r}
for (item in basket) {
  hang_up(item)
}
```


```{r}
print("The day is Monday")
print("The day is Tuesday")
print("The day is Wednesday")
print("The day is Thursday")
print("The day is Friday")
```


```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

for (day in weekdays) {                          # this states where the day is 
  phrase <-  paste("The day is", day, sep = " ")
  print(phrase)
}
```
Task - 10 mins

Change the code below to use a for loop:

print(1)
print(2)
print(3)
print(4)
print(5)
```{r}
numbers <-  c(1, 2, 3, 4, 5)

for (num in numbers) {
  print(num)
}

```

## While Loops

While (some condition) {
  #do something
}

while (drive_filled_with_snow) {
  clear_drive()
}

### A more R example

```{r}
# set a beginning value
current_val <- 1
# set a stop value
stop_val <- 10

# while (current_val < stop_val) {
#   print(current_val)
# }

# This will print 1 for ever

while (current_val < stop_val) {
  print(current_val)
  # introduce a counter/ something to change the condition maybe
  current_val <-  current_val + 1
}
```


## For Loop indexing

```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

for (i in 1:length(weekdays)) {                          # i for increment 
  
  print(i)                                               #
  phrase <-  paste("The day is", weekdays[i], sep = " ") #
  print(phrase)
}
```

```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

for (i in 1:length(weekdays)) {                          # i for increment 
  plural <-  paste0(weekdays[i], "s") #
  print(plural)
}

# Adds "s" to the end of the word
```

## Nested loops

Loops within loops

```{r}
my_matrix <- replicate(5, floor(rnorm(5) *100))

my_matrix
# matrix random number
# floor rounds to the nearest whole number
# rnorm generates a small random number
```

for row in row{
  for col in cols{
    print(my_matrix[row,column])
  }
}


```{r}
for (row in 1:5) {
  for (col in 1:5) {
    print(my_matrix[row, col])
  }
}

# prints as [1 ,1], [1, 2], [1, 3]...
```


```{r}
# get the number of rows, columns
n_rows <- nrow(my_matrix)
n_cols <- ncol(my_matrix)

# iterate through rows
for (row in 1:n_rows) {
  # iterate through columns
  for (col in 1:n_cols) {
    # print current position
    print(my_matrix[row, col])
  }
}

# gives the same as above
```


#Task

```{r}
n_rows <- nrow(product_matrix)
n_cols <- ncol(product_matrix)

product_matrix <- matrix(nrow = 5, ncol = 5)

for (i in 1:n_rows) {
  for (i in 1:n_cols) {
    print(product_matrix[i, i])
  }
}


product_matrix
```

```{r}
product_matrix <- matrix(nrow = 5, ncol = 5)

# iterates through every row of m
for (x in 1:nrow(product_matrix)){
  # iterates through every colum of m
  for (y in 1:ncol(product_matrix)){
    #print(x)
    #print(y)
    product_matrix[x, y] <- x * y
    # print(product_matrix) will print 25 times
  }
  # print(product_matrix) will print 5 times
}
print(product_matrix) #will print 1 times
```


```{r}
# create a numeric vector
my_vector <-  c(1, 4, 6, 2, 4)

# create a temporary numeric vector (length 5)
temp_vector <- numeric(length(my_vector))

for (i in 1: length(my_vector)) {
  temp_vector[i] <- my_vector[i] + 1
}

# overwrite initial vector
my_vector <-  temp_vector

my_vector
```


```{r}
my_vector
my_vector + 1
```

## the apply family of functions

`apply`
`lapply()`
`sapply()`
purr::
`map()`

```{r}
sapply(iris, class)
```

sapply
- will try to return the simplest data structure it can (vectors)

lapply
- will usually return a list

# Task
Final Task from me (5 mins):
Using the starwars list from the CodeClanData package, do the following:
Print the name for every character in the list
You can use for loops or apply

```{r}
names(starwars)

```

```{r}
starwars %>% 
  select(name) %>% 
  lapply()
```

# Johny work
```{r}
for (names in starwars) {
  print(names)
}
```

# class work out
```{r}
for (x in starwars$name) {
  print(x)
}
```

```{r}
CodeClanData::starwars[[1]][["name"]]  # Give one name

sapply(CodeClanData::starwars, `[[`, "name") # Gives it as a vector

sapply(CodeClanData::starwars, `[`, "name") # Gives it a a list

# R has a bigger data file of starwars, using starwars from CodeClanData
```


